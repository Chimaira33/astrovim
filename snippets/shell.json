{
  "mapfile": {
    "prefix": "mapfile",
    "body": "mapfile -t ${1} <<<\"${2}\""
  },
  "null": {
    "prefix": "null",
    "body": "${1}>/dev/null"
  },
  "shellcheck_disable": {
    "prefix": "scdis",
    "body": "# shellcheck disable=${1}"
  },
  "shellcheck_shell": {
    "prefix": "scsh",
    "body": "# shellcheck shell=${1}"
  },
  "read": {
    "body": "read -r ${1}",
    "description": "Read input.",
    "prefix": "read"
  },
  "shellcheck_bash": {
    "prefix": "scbash",
    "body": "# shellcheck shell=bash\n"
  },
  "shellcheck_ksh": {
    "prefix": "scksh",
    "body": "# shellcheck shell=ksh\n"
  },
  "shellcheck_busybox": {
    "prefix": "scbox",
    "body": "# shellcheck shell=busybox\n"
  },
  "case_functiom": {
    "prefix": "casfun",
    "body": "${1}() {\ncase \"\\$1\" in\n${2:a})\n;;\n${0:b})\n;;\n*)\n;;\nesac\n}"
  },
  "plb": {
    "prefix": "plb",
    "body": "plb() {\n  printf '%b\\n' \"\\$*\"\n}"
  },
  "pln": {
    "prefix": "pln",
    "body": "pln() {\n  printf '%s\\n' \"\\$*\"\n}"
  },
  "sfunctions": {
    "prefix": "sfunc",
    "body": ". ~/.functions\n\n"
  },
  "readarray": {
    "prefix": "readarray",
    "body": "mapfile -t ${1} < <(${2})"
  },
  "printf": {
    "prefix": "printf",
    "body": "printf '%s\\n' \"${1}\""
  },
  "posix_&null": {
    "prefix": "&posix_null",
    "body": ">/dev/null 2>&1"
  },
  "ifelse": {
    "prefix": "ifelse",
    "body": "if [[ ${1} ]]; then\nelse\nfi"
  },
  "printfb": {
    "prefix": "printfb",
    "body": "printf '%s\\b' \"${1}\""
  },
  "getopts": {
    "prefix": "getopts",
    "body": "while getopts \":${1:ab}\" flag; do\ncase \"\\$flag\" in\n${2:a})\n;;\n${0:b})\n;;\n*)\n;;\nesac\ndone\n"
  },
  "while_case": {
    "prefix": "whicase",
    "body": "while [[ \\$1 =~ ^- && \\$1 != '--' ]]; do\ncase \"\\$1\" in\n${1:a})\nshift\n;;\n${2:b})\nshift\n;;\nesac\nshift\ndone\n"
  },
  "break": {
    "prefix": "break",
    "body": "break"
  },
  "sdir": {
    "prefix": "sdir",
    "body": "DIR=\"\\$(cd -P \"\\$(dirname \"\\$(readlink -f -- \"\\$0\")\")\" &>/dev/null && pwd)\""
  },
  "$(": {
    "prefix": "$)",
    "body": "${1}=\\$(${2})"
  },
  "}": {
    "prefix": "}",
    "body": "{\n${1}\n}"
  },
  "until": {
    "prefix": "unt",
    "body": "until [[ ${1} ]]; do\ndone\n"
  },
  "sb": {
    "prefix": "sb",
    "body": ["#!/data/data/com.termux/files/usr/bin/env bash"]
  },
  "shb": {
    "prefix": "shb",
    "body": ["#!/data/data/com.termux/files/usr/bin/env ${1}"]
  },
  "for": {
    "prefix": "for",
    "body": "for ${1} in ${2:?}; do\ndone\n"
  },
  "function": {
    "prefix": "fun",
    "body": "${1}() {\n  ${2}\n}"
  },
  "replace": {
    "prefix": "replace",
    "body": "\"\\${${1}[@]///}\""
  },
  "!": {
    "prefix": "!",
    "body": "if ! ${1}; then\nfi"
  },
  "${": {
    "prefix": "$}",
    "body": "\"\\$${1}\""
  },
  "ifelif": {
    "prefix": "ifelif",
    "body": "if [[ ${1} ]]; then\nelif [[ ${2} ]]; then\nfi"
  },
  "comment_block": {
    "prefix": "###COMMENT",
    "body": ": <<'###COMMENT'\n###COMMENT"
  },
  "export": {
    "prefix": "ex",
    "body": "export ${1}=\"${2}\""
  },
  "elseif": {
    "prefix": "elif",
    "body": "elif [[ ${1} ]]; then\n"
  },
  "array_command": {
    "prefix": "array_command",
    "body": "${1}=()\n${2}=(\"\\${${0}[@]}\")"
  },
  "declare$": {
    "prefix": "dec$",
    "body": "declare ${1}\n${2}=\"\\$(${0})\""
  },
  "alias": {
    "prefix": "ali",
    "body": "alias ${1}=\"\""
  },
  "background": {
    "prefix": "bkg",
    "body": "{ (${1}); } &"
  },
  "declare": {
    "prefix": "dec",
    "body": "declare ${1}=\"${2}\""
  },
  "while": {
    "prefix": "whi",
    "body": "while [[ ${1} ]]; do\ndone\n"
  },
  "case": {
    "prefix": "cas",
    "body": "case \"\\$1\" in\n${1:a})\n;;\n${2:b})\n;;\n*)\n;;\nesac\n"
  },
  "bash_sdir": {
    "prefix": "bsdir",
    "body": "DIR=\"\\$(cd -P \"\\$(dirname \"\\$(readlink -f -- \"\\${BASH_SOURCE[0]}\")\")\" &>/dev/null && pwd)\""
  },
  "prefix": {
    "prefix": "prefix",
    "body": "\"\\${${1}[@]##*/}\""
  },
  "echo": {
    "body": "echo \"${1}\"",
    "description": "Echo a message.",
    "prefix": "echo"
  },
  "suffix": {
    "prefix": "suffix",
    "body": "\"\\${${1}[@]%%/*}\""
  },
  "$)\"": {
    "prefix": "$)\"",
    "body": "${1}=\"\\$(${2})\""
  },
  "if": {
    "prefix": "if",
    "body": "if [[ ${1} ]]; then\nfi"
  },
  "delay": {
    "prefix": "delay",
    "body": "until [[ \\$(getprop sys.boot_completed) -eq 1 && -d /sdcard ]]; do\n  sleep 1\ndone"
  }
}
